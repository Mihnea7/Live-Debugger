{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\froman\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\froman\fprq2\fcharset0 Calibri;}{\f6\froman\fprq2\fcharset0 Courier New;}{\f7\froman\fprq2\fcharset0 Arial;}{\f8\froman\fprq2\fcharset0 var(--ff-mono);}{\f9\fnil\fprq2\fcharset0 Calibri;}{\f10\fnil\fprq2\fcharset0 Courier New;}{\f11\fnil\fprq2\fcharset0 Times New Roman;}{\f12\fnil\fprq2\fcharset0 Lohit Devanagari;}{\f13\fnil\fprq2\fcharset0 var(--ff-mono);}{\f14\fnil\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f15\fnil\fprq2\fcharset0 Arial;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red5\green99\blue193;\red96\green94\blue92;\red35\green38\blue41;\red51\green51\blue51;\red225\green223\blue221;}
{\stylesheet{\s0\snext0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1 Normal;}
{\*\cs15\snext15 Default Paragraph Font;}
{\*\cs16\sbasedon15\snext16\dbch\af10\afs20\loch\f6\fs20 HTML Preformatted Char;}
{\*\cs17\sbasedon15\snext17\dbch\af11\loch\f6\fs20 HTML Code;}
{\*\cs18\sbasedon15\snext18\dbch\af11\cf17\ul\ulc0 Hyperlink;}
{\*\cs19\sbasedon15\snext19\dbch\af11\cf18\chcbpat21 Unresolved Mention;}
{\*\cs20\sbasedon15\snext20\dbch\af11\ai Emphasis;}
{\*\cs21\snext21\dbch\af11 ListLabel 1;}
{\*\cs22\snext22\dbch\af11 ListLabel 2;}
{\*\cs23\snext23\dbch\af11 ListLabel 3;}
{\*\cs24\snext24\dbch\af11 ListLabel 4;}
{\*\cs25\snext25\dbch\af11 ListLabel 5;}
{\*\cs26\snext26\dbch\af11 ListLabel 6;}
{\*\cs27\snext27\dbch\af11 ListLabel 7;}
{\*\cs28\snext28\dbch\af11 ListLabel 8;}
{\*\cs29\snext29\dbch\af11 ListLabel 9;}
{\*\cs30\snext30\dbch\af11 ListLabel 10;}
{\*\cs31\snext31\dbch\af11 ListLabel 11;}
{\*\cs32\snext32\dbch\af11 ListLabel 12;}
{\*\cs33\snext33\dbch\af11 ListLabel 13;}
{\*\cs34\snext34\dbch\af11 ListLabel 14;}
{\*\cs35\snext35\dbch\af11 ListLabel 15;}
{\*\cs36\snext36\dbch\af11 ListLabel 16;}
{\*\cs37\snext37\dbch\af11 ListLabel 17;}
{\*\cs38\snext38\dbch\af11 ListLabel 18;}
{\*\cs39\snext39\dbch\af11 ListLabel 19;}
{\*\cs40\snext40\dbch\af11 ListLabel 20;}
{\*\cs41\snext41\dbch\af11 ListLabel 21;}
{\*\cs42\snext42\dbch\af11 ListLabel 22;}
{\*\cs43\snext43\dbch\af11 ListLabel 23;}
{\*\cs44\snext44\dbch\af11 ListLabel 24;}
{\*\cs45\snext45\dbch\af11 ListLabel 25;}
{\*\cs46\snext46\dbch\af11 ListLabel 26;}
{\*\cs47\snext47\dbch\af11 ListLabel 27;}
{\*\cs48\snext48\langfe255\cf13\lang255\ul\ulc0 FollowedHyperlink;}
{\*\cs49\snext49\dbch\af11 ListLabel 28;}
{\*\cs50\snext50\dbch\af11 ListLabel 29;}
{\*\cs51\snext51\dbch\af11 ListLabel 30;}
{\*\cs52\snext52\dbch\af11 ListLabel 31;}
{\*\cs53\snext53\dbch\af11 ListLabel 32;}
{\*\cs54\snext54\dbch\af11 ListLabel 33;}
{\*\cs55\snext55\dbch\af11 ListLabel 34;}
{\*\cs56\snext56\dbch\af11 ListLabel 35;}
{\*\cs57\snext57\dbch\af11 ListLabel 36;}
{\s58\sbasedon0\snext59\dbch\af12\langfe1025\dbch\af14\afs28\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb240\sa120\keepn\ltrpar\cf0\loch\f4\fs28\lang2057\kerning1 Heading;}
{\s59\sbasedon0\snext59\dbch\af9\langfe1025\dbch\af14\afs22\sl-276\slmult0\ql\widctlpar\hyphpar0\faauto\sb0\sa140\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1 Text Body;}
{\s60\sbasedon59\snext60\dbch\af12\langfe1025\dbch\af14\afs22\sl-276\slmult0\ql\widctlpar\hyphpar0\faauto\sb0\sa140\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1 List;}
{\s61\sbasedon0\snext61\dbch\af12\langfe1025\dbch\af14\afs24\ai\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb120\sa120\ltrpar\cf0\loch\f5\fs24\lang2057\i\kerning1 Caption;}
{\s62\sbasedon0\snext62\dbch\af12\langfe1025\dbch\af14\afs22\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1 Index;}
{\s63\snext63\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1 Normal Table;}
{\s64\sbasedon0\snext64\dbch\af10\langfe1025\dbch\af14\afs20\sl-240\slmult0\ql\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\hyphpar0\faauto\sb0\sa0\ltrpar\cf0\loch\f6\fs20\lang2057\kerning1 HTML Preformatted;}
}{\*\listtable{\list\listtemplateid1
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00);}{\levelnumbers\'01;}\rtlch\dbch\af11 \ltrch\loch\fi-360\li720}
{\listlevel\levelnfc4\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\rtlch\dbch\af11 \ltrch\loch\fi-360\li1440}
{\listlevel\levelnfc2\leveljc2\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\rtlch\dbch\af11 \ltrch\loch\fi-180\li2160}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\rtlch\dbch\af11 \ltrch\loch\fi-360\li2880}
{\listlevel\levelnfc4\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\rtlch\dbch\af11 \ltrch\loch\fi-360\li3600}
{\listlevel\levelnfc2\leveljc2\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\rtlch\dbch\af11 \ltrch\loch\fi-180\li4320}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\rtlch\dbch\af11 \ltrch\loch\fi-360\li5040}
{\listlevel\levelnfc4\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\rtlch\dbch\af11 \ltrch\loch\fi-360\li5760}
{\listlevel\levelnfc2\leveljc2\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\rtlch\dbch\af11 \ltrch\loch\fi-180\li6480}\listid1}
{\list\listtemplateid2
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}\listid2}
}{\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}{\*\generator LibreOffice/6.4.7.2$Linux_X86_64 LibreOffice_project/40$Build-2}{\info{\creatim\yr2021\mo10\dy11\hr13\min2}{\revtim\yr2021\mo11\dy24\hr12\min37}{\printim\yr0\mo0\dy0\hr0\min0}}{\*\userprops{\propname Operator}\proptype30{\staticval mihneamaldaianu@outlook.com}}\deftab720\deftab720
\hyphauto1\viewscale100
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1440\pgdscnxt0 Default Style;}}
\formshade{\*\pgdscno0}\paperh15840\paperw12240\margl1440\margr1440\margt1440\margb1440\sectd\sbknone\sectunlocked1\pgndec\pgwsxn12240\pghsxn15840\marglsxn1440\margrsxn1440\margtsxn1440\margbsxn1440\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
{\*\ftnsep\chftnsep}\pgndec\pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch\ab \ltrch\cf19\b\chcbpat8\loch
DEBUGGER}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\cf19\chcbpat8\loch
A debugger is a program that can examine the state of your program while your program is running. A traditional debugger can halt execution when it reaches a particular place in the code, set by a breakpoint, and examine the values of the variables in the program at that time. It can also execute code step-by-step, one line at a time.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\cf19\chcbpat8\loch
The way a debugger is implemented will differ based on what OS is in use and what the user is debugging. Generally, a user can attach a debugger to a process either by its PID or name (a lookup is performed to find the PID) and initiate the debugging session via a system call. If that is successful, the debugger will enter an event loop, similar to a UI system, but instead of events coming from the lower-level system, the OS will generate events based on triggers in the process being debugged \u8211\'96 eg breakpoint, exception.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch\ab \ltrch\cf19\b\chcbpat8\loch
PIPELINE DEBUGGER}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch\afs20\ab \ltrch\cf19\fs20\b\chcbpat8\loch
HOW PIPELINES WORK}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
Assuming a pipeline is integrated with a Git repository, the pipeline will be triggered when some change is made to that repo, e.g., code is pushed. The definitions for the steps the pipeline has to achieve are housed in a .yaml file, which usually are the container definition and build, lint, test, deploy stages. Within the specified container, the pipeline retrieves all files from the Git repository, including the .yaml file. A build is created according to the given dependencies, so that the test and deploy stages will work the same, regardless of where the command is executed from.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch\afs20\ab \ltrch\cf19\fs20\b\chcbpat8\loch
THE PROBLEM}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
Problems arise when changes are needed to the pipeline definitions \u8211\'96 the .yaml file. In order for them to be tested, the pipeline needs to run every time, and more importantly, all steps need to run. To amend the yaml file based on feedback from previous runs, it has to be changed locally and pushed, triggering the pipeline and executing all the steps. This will result in a lot of waiting time and an inefficient process, as the developer is idle and has to wait for the pipeline to finish. This is particularly problematic when the scenarios the pipeline is expected to cover are complex.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch\ab \ltrch\cf19\b\chcbpat8\loch
LOCAL DEBUGGER}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\cf19\chcbpat8\loch
Local debugging can be implemented to ease the pipeline testing process. Using a docker container, bash scripts can be created to install dependencies and to build and test the project. Placing them in the repository, the yaml file can be changed to run the bash scripts instead of giving it specific instructions. This gives the developer more control and improves their ability to debug the pipeline. With this method, changes can be made in the bash files and ran within a docker container, to simulate what would happen in a real pipeline.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch\ab \ltrch\cf19\b\chcbpat8\loch
DEBUGGING WITH SSH ACCESS}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\cf19\chcbpat8\loch
Some pipelines offer direct communication with the host system on which the scripts are executed. This allows debugging the pipeline using SSH so the developer can inspect log files, running processes and directory paths, inspect environment variables etc. A debug session can be configured to start when a pipeline stage fails and it can have some control over the pipeline, e.g. it can be used to restart that stage in debug mode.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\cf19\chcbpat8\loch
A problem with this approach is that not all providers support it \u8211\'96 Circle CI and Travis CI do, but GitLab does not (they allow jobs to be run locally) and GitHub Actions does not support it \u8220\'93natively\u8221\'94, but third party software exists. It might also not appeal to companies because there is a risk of security attacks, e.g. man in the middle, due to the remote nature of the method.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch\ab \ltrch\cf19\b\chcbpat8\loch
LIVE DEBUGGING A PIPELINE}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
Live debugging is a solution that hasn\u8217\'92t been explored in depth by the current providers. Much to a traditional code debugger, it would allow the developer to set breakpoints after certain stages of the pipeline, which would start a debugging session \u8211\'96 a shell within the container the pipeline is running from. Codefresh has created such debugger in 2019, however it is exclusive to their pipelines.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch\ab \ltrch\cf19\b\chcbpat8\loch
SPECIFICATIONS}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\cf19\chcbpat8\loch
A developer should be able to set breakpoints before, or after the stages in their pipeline. This would allow them to inspect the container before or after the scripts execute, as to understand that went wrong. Breakpoints should be defined in the yaml file.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\cf19\chcbpat8\loch
The pipeline should only run in debug mode when needed \u8211\'96 that is, not when the pipeline is normally triggered, e.g. after pushing code, but only when the developer needs it.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
The shell that appears when the breakpoint is encountered should have full access to the container that is running the step \u8211\'96 it should be able to modify it. It also needs to allow the developer to restart that stage, after changes were made.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch\ab \ltrch\cf19\b\chcbpat8\loch
CHALLENGES}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\cf19\chcbpat8\loch
The pipeline needs to be modified to understand the debugging specifications from the .yaml file.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\cf19\chcbpat8\loch
The pipeline needs a way to halt execution at a given stage, e.g. before the build stage, and allow the developer to control when to resume normal execution.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\cf19\chcbpat8\loch
When pipeline execution is halted, it needs to open a shell giving the developer access to the container.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\cf19\chcbpat8\loch
These are challenges because they may to be implemented differently, based on the technology of the provider. There could be different architectures, or different technologies, and they need to be taken into consideration when creating the live debugger because it will need to behave differently.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\cf19\chcbpat8\loch
Security is another challenge \u8211\'96 the live debugger should be secure against attackers who might want to use it as a way to gain access to confidential information (if the live debugger is implemented as a remote solution). It should also have a confidentiality model implemented to limit who within the team/company should have access to the debugging information, and what they can see.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0\rtlch \ltrch\cf19\chcbpat8\loch

\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0\rtlch\dbch\af11 \ltrch\lang1033\loch

\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch\ab \ltrch\lang1033\b\loch
CURRENT PIPELINE SOLUTIONS}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
This section seeks to analyse the current implementations of CI/CD solutions. The purpose is to understand how they are implemented as that is a major factor in how a live debugger could be attached to them.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1{\listtext\pard\plain \dbch\af11 1)\tab}\ilvl0\ls1 \li1440\ri0\lin1440\rin0\fi-360\sl254\slmult1\li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\lang1033\loch
Jenkins}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
Written in Java}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
Can create a plugin that allows live debugging of pipeline}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
Master Slave architecture \u8211\'96 master delegates worlkload to slave servers (through TCP/IP). Slaves provide environments (eg Windows, OS X, Linux) based on master\u8217\'92s requests. Master records and provides the build results. Slave is a Java executable that runs on a remote machine and executes build jobs dispatched by the master.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
Jenkins allows execution of shell scripts}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
Implement live debugger: potentially as plugin or script}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
Advantages: open source, easy to integrate}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1{\listtext\pard\plain \dbch\af11 2)\tab}\ilvl0\ls1 \li1440\ri0\lin1440\rin0\fi-360\sl254\slmult1\li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\lang1033\loch
GitHub Actions}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
CI/CD service provided by Github}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
Each stage runs in a separate container \u8211\'96 that would allow the live debugger to work as specified in the requirements}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
In Github Actions, events (code pushed) trigger a workflow that has one more more jobs (that by default run in parallel). Jobs are composed of steps, which are in turn made up of actions. Jobs are run by a Github runner, which is a server that listens for jobs, runs them, reports progress and logs results.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
Access to the runner will be needed to implement the live debugger. It will need to send signals to the runner when to pause jobs and when to resume them. }
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
Challenge: tight integration with GitHub \u8211\'96 difficult to access the underlying infrastructure that would be needed to implement the live debugger.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1{\listtext\pard\plain \dbch\af11 3)\tab}\ilvl0\ls1 \li1440\ri0\lin1440\rin0\fi-360\sl254\slmult1\li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\lang1033\loch
GitLab CI}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
CI/CD service provided by GitLab}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
Works similarly to GitHub Actions \u8211\'96 pipelines comprise of jobs, which define what to do, and stages, which define when jobs are run. Jobs are executed by runners, and multiple jobs in the same stage are executed in parallel, if enough runners are available.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
If all jobs in a stage succeed, the pipeline moves onto the next stage. If a job in a stage fails, the pipeline usually ends early and subsequent jobs are not executed}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0{\rtlch \ltrch\lang1033\loch
Same idea to implement the live debugger. Same challenge too.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0\rtlch\dbch\af11 \ltrch\lang1033\loch

\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1{\listtext\pard\plain \dbch\af11 4)\tab}\ilvl0\ls1 \li1440\ri0\lin1440\rin0\fi-360\sl254\slmult1\li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\lang1033\loch
Travis CI}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li360\ri0\lin360\rin0\fi0\rtlch\dbch\af11 \ltrch\lang1033\loch

\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch\ab \ltrch\lang1033\b\loch
JENKINS}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
Jenkins is a prime candidate because the software is open source and entirely free, written in Java and easily allows plugins and shell scripts. If a plugin is not available, one has the means to write it themselves. This is all advantageous in comparison to all other CI platforms previously mentioned.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
Defining a Jenkins pipeline is achieved slightly differently than the other platforms that use .yaml files, but follows the same concept. A Jenkinsfile text file is committed to the repository and that contains all necessary instructions. }
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
A Jenkinsfile can be written in 2 fundamentally different ways \u8211\'96 declarative and scripted syntax. Declarative syntax is a more recent addition and aims to richer syntactical features over its scripted counterpart, as well as make the process of writing and reading pipeline code easier.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch\ab \ltrch\lang1033\b\loch
JENKINSFILE IMPLEMENTATION}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
Jenkins allows executing shell scripts in its Jenkinsfile \u8211\'96 that indicates that injecting a live debugger is possible. The question of how breakpoints can be defined, how developers can activate debugging mode and how the shells will behave arise. Ideally, new syntax should be introduced in the Jenkinsfile that would allow it to discover debugging instructions (that may not be possible for the purposes of this project, however it would be an essential step in achieving a usable live debugger). When declaring a stage, a user should be able to specify a breakpoint for it. For example}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch\dbch\af11 \ltrch\lang1033\loch
\tab \tab \tab }{\rtlch \ltrch\lang1033\loch
Stage(test) \{}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
\tab \tab \tab Breakpoint: before/after (before, after can also be used to set 2 breakpoints)}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
\tab \tab \tab \u8230\'85.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
\tab \tab \tab \}}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
While it might not be possible to implement that, it could be simulated by executing a shell script whenever a stage fails. The behaviour would not be the same as a genuine live debugger, but it is suitable for a proof-of-concept. Using a declarative pipeline, it is possible to detect errors and when the build or pipeline has failed, i.e.}
\par \pard\plain \s64\dbch\af10\langfe1025\dbch\af14\afs20\sl-240\slmult0\ql\widctlpar\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\hyphpar0\faauto\sb0\sa0\ltrpar\cf0\loch\f6\fs20\lang2057\kerning1\sl240\slmult1\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\faroman\li0\ri0\lin0\rin0\fi0\ltrpar{\rtlch \ltrch\lang1033\loch
\tab \tab }{\rtlch\dbch\af13\dbch\af13\hich\af8 \ltrch\loch\f8\loch
catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') \{}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\faroman\li0\ri0\lin0\rin0\fi0\sb0\sa0{\rtlch\dbch\af13\dbch\af13\afs20\hich\af8 \ltrch\fs20\loch\f8
\u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 }{\rtlch\dbch\af13\dbch\af13\afs20\hich\af8 \ltrch\fs20\loch\f8\loch
sh "exit 1"}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\tx916\tx1832\tx2748\tx3664\tx4580\tx5496\tx6412\tx7328\tx8244\tx9160\tx10076\tx10992\tx11908\tx12824\tx13740\tx14656\faroman\li0\ri0\lin0\rin0\fi0\sb0\sa0{\rtlch\dbch\af13\dbch\af13\afs20\hich\af8 \ltrch\fs20\loch\f8
\u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 \u8198\'20 }{\rtlch\dbch\af13\dbch\af13\afs20\hich\af8 \ltrch\fs20\loch\f8\loch
\}}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
Using this feature, we could inject a shell conditionally when the pipeline failed. This is the doorway to implementing the live debugger. For scripted pipelines, we could achieve the same by wrapping steps inside a try/catch block. Try would contain the instructions, and catch would contain an instruction that executes the live debugger script.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
The live debugger script, with this method, would be a shell script that opens a terminal and allows the user to browse the underlying container, therefore allowing them to execute commands, access environment variables and access files, etc. It should take into account a few instructions such as when the user types \u8220\'93continue\u8221\'94 it should resume the pipeline, and \u8220\'93quit\u8217\'92 should exit the debugging session and stop the pipeline.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch\ab \ltrch\lang1033\b\loch
PLUGIN IMPLEMENTATION}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
As Jenkins allows developers to easily create plugins, that would be a better way to implement a live debugger in the long run, as developers would only need to install the plugin to their Jenkins, as opposed to adding instructions to the Jenkisfile on every stage.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
A Jenkins plugin would allow us to add new features to the local Jenkins platform. We could use it to add debugging instructions when using the UI to configure a build, e.g. the breakpoints. The plugin would need to execute the steps specified in the Jenkinsfile and inject the debugging scripts at specified breakpoints.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
(Researching plugin development to see how it can be used to implement the live debugger)}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
RootActions \u8211\'96 make new options appear on the Jenkins menu}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
Descriptor \u8211\'96 object that has metadata about a describable object (Singleton that tells Jenkins how to create a new instance of what it is describing); holds information and behaviour common to all copies of its describables (e.g save/load operations, data validation, fill dropdowns)}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
@DataBoundConstructor \u8211\'96 allows jelly/groovy files to pass data to Java (does deserialization and is added to the constructor of a describable object)\u8198\'20 \u8198\'20 (around min 25)}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
Testing \u8211\'96 around min 50 \u8211\'96 55}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{{\field{\*\fldinst HYPERLINK "https://www.jenkins.io/doc/developer/plugin-development/pipeline-integration/" }{\fldrslt {\rtlch\dbch\af11\langfe1033 \ltrch\cf17\ul\ulc0\loch
https://www.jenkins.io/doc/developer/plugin-development/pipeline-integration/}}}}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
https://www.velotio.com/engineering-blog/jenkins-plugin-development}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
Jenkins has a build step and a post build step. Build steps are executed first, and when a build step succeeds it moves onto the next one. If it fails, the build fails and no further steps are executed. Post build steps are executed after the build steps finished, regardless whether the build was successful.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
There is a choice of developing build or post build plugin. For a live debugger it should be a build plugin. It is easy to pick the type of plugin, as the architecture allows you to implement build or postbuild interfaces and override the required methods. For build plugin, the interface is \u8220\'93husdon.tasks.Builder}{\rtlch\langfe2057\dbch\af15\afs27\hich\af7 \ltrch\cs20\dbch\af11\ai\cf20\expnd6\expndtw30\chcbpat8\loch\f7\loch
\u8221\'94 }{\rtlch \ltrch\lang1033\loch
and \u8220\'93BuildStepDescriptor<builder> </builder>\u8221\'94 for the descriptor, and for the post build it is \u8220\'93husdon.tasks.Recorder\u8221\'94 and \u8220\'93BuildStepDescriptor<publisher> </ publisher >\u8221\'94 for the descriptor.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
The interface offers a perform method that can be overridden and called when the build runs. It can access the values provided in the UI and perform the plugin activity. The perform method returns a bool, true if the build succeeded and false otherwise.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
The descriptor class handles the configuration of the plugin. When the developers uses the configure link on Jenkins, the method provided by the descriptor is invoked and loads the configured data. Save/load operations and data validations are performed here.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
Jenkins uses jelly for data configuration, which has its own syntax and supports HTML and JavaScript. There are two main jelly files: config.jelly (sets local parameters) and global.jelly (sets global parameters). Jenkins uses these files to show the parameters on the UI, so the fields that appear on the jelly files will show up on the Jobs configuration page as selectable/configurable.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
Jenkins uses Action classes to read data from jelly files and deserialize it, using a @DataBoundConstructor annotation. Names in this class need to correspond to the names in the jelly file. Jenkins can access these values using getters and setters.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
A plugin can make use of environment variables provided either by the user or Jenkins through the use of Envvars objects.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
With this functionality, we would be able to extend the Jenkins UI to allow us to add debugging related data, such as when breakpoints should occur. We could also define environment variables in the Jenkinsfile and access them using Ennvars (breakpoints).}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
PauseAction can be used to pause the pipeline when encountering a breakpoint. (that still needs to open a terminal)}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0\rtlch\dbch\af11 \ltrch\lang1033\loch

\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
A daemon is a long-running background process that answers requests for services. A daemon shell could with debugging functionality could run at all times within the server, and be fired up when the Jenkins pipeline fails. That will give the developer control over the environment to help with the debugging process. Using system we are able to run a script as a daemon (needs chmod +x permission)}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
Jenkins CLI can be used to pause/resume jobs from the shell. It can be installed on the server, and the functions can be called from the shell script}{\rtlch\dbch\af11 \ltrch\lang1033\loch
.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
Jenkins quiet-down pauses the pipeline, but Jenkins is still running. cancelQuietDown can be used to revert the effect.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{{\field{\*\fldinst HYPERLINK "http://<jenkins-server>/quietDown" }{\fldrslt {\rtlch\langfe255 \ltrch\cf13\lang1033\ul\ulc0\loch
http://<jenkins-server>/quietDown}}}}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{{\field{\*\fldinst HYPERLINK "https://dheerajgambhir.medium.com/optimized-way-to-stop-restart-jenkins-72fb52aeac49" }{\fldrslt {\rtlch\dbch\af11\langfe1033 \ltrch\cf17\ul\ulc0\loch
https://dheerajgambhir.medium.com/optimized-way-to-stop-restart-jenkins-72fb52aeac49}}}}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
https://support.cloudbees.com/hc/en-us/articles/216118748-How-to-Start-Stop-or-Restart-your-Instance}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{{\field{\*\fldinst HYPERLINK "https://stbtestautomation.wordpress.com/2016/08/02/jenkins-pause-and-resume-jobs/" }{\fldrslt {\rtlch\dbch\af11\langfe1033 \ltrch\cf17\ul\ulc0\loch
https://stbtestautomation.wordpress.com/2016/08/02/jenkins-pause-and-resume-jobs/}}}}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0\loch

\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{{\field{\*\fldinst HYPERLINK "https://www.researchgate.net/publication/37146936_Debugging_A_review_of_the_literature_from_an_educational_perspective" }{\fldrslt {\rtlch\dbch\af11\langfe1033 \ltrch\cf17\ul\ulc0\loch
https://www.researchgate.net/publication/37146936_Debugging_A_review_of_the_literature_from_an_educational_perspective}}}}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{{\field{\*\fldinst HYPERLINK "https://dl.acm.org/doi/pdf/10.1145/3105726.3106173" }{\fldrslt {\rtlch\dbch\af11\langfe1033 \ltrch\cf17\ul\ulc0\loch
https://dl.acm.org/doi/pdf/10.1145/3105726.3106173}}}}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{{\field{\*\fldinst HYPERLINK "https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=93698" }{\fldrslt {\rtlch\dbch\af11\langfe1033 \ltrch\cf17\ul\ulc0\loch
https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=93698}}}}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{{\field{\*\fldinst HYPERLINK "https://ieeexplore.ieee.org/abstract/document/4814141" }{\fldrslt {\rtlch\dbch\af11\langfe1033 \ltrch\cf17\ul\ulc0\loch
https://ieeexplore.ieee.org/abstract/document/4814141}}}}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{{\field{\*\fldinst HYPERLINK "https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1331296" }{\fldrslt {\rtlch\dbch\af11\langfe1033 \ltrch\cf17\ul\ulc0\loch
https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1331296}}}}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{{\field{\*\fldinst HYPERLINK "https://dl.acm.org/doi/pdf/10.1145/1352322.1352191" }{\fldrslt {\rtlch\dbch\af11\langfe1033 \ltrch\cf17\ul\ulc0\loch
https://dl.acm.org/doi/pdf/10.1145/1352322.1352191}}}}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
how do developers debug?}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch \ltrch\lang1033\loch
Ci cd pipeline debugging}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0\loch

\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch\ab \ltrch\lang1033\b\loch
Implementing live debugger as a proof of concept}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch\ab0 \ltrch\lang1033\b0\loch
In this initial stage I attempt to implement a proof-of-concept version of the live debugger. This means the implementation retains the core features of the live debugger, but is overall simplified to decrease the complexity of the solution, and thus the time and resources needed to create it. The aim of this step is to simulate the behaviour of a live debugger, by adding it to a real C# project and simulate breakpoints at different stages. }{\rtlch\ab0 \ltrch\lang1033\b0\loch
I also compare the simplified design with what would be expected from a final product, and attempt to validate whether the comparison is feasible or the live debugger needs extra support.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch\ab0 \ltrch\lang1033\b0\loch
T}{\rtlch\ab0 \ltrch\lang1033\b0\loch
he initial challenge is telling Jenkins where in the stage to insert the breakpoints: before the commands take place, or after? In a finished product, the goal would be to make it clear to the developers where the breakpoints are inserted, and what kind of breakpoints they are. This could be implemented with an UI. However, for this stage, I presume the breakpoints are previously set by a developer and leverage the declarative Jenkinsfile to trigger the debugging script. }
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch\ab0 \ltrch\lang1033\b0\loch
To insert a breakpoint after the pipeline stage has executed, Jenkinsfile allows a \u8220\'93post\u8221\'94 block after a corresponding \u8220\'93stage\u8221\'94, that can differentiate between a successful or failed execution, using \u8220\'93failure\u8221\'94 or \u8220\'93success\u8221\'94 blocks within a \u8220\'93post\u8221\'94.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch\ab0 \ltrch\lang1033\b0\loch
To simulate a breakpoint before a stage begins executing, simply run the instruction that triggers the debugging program. This is needed because Jenkinsfile has no corresponding feature to \u8220\'93post\u8221\'94 but before stage execution. In both cases, when the live debugger starts, a }{\rtlch\dbch\af9\langfe1025\dbch\af14\afs22\ab0 \ltrch\cf0\fs22\lang1033\b0\kerning1\loch
request}{\rtlch\ab0 \ltrch\lang1033\b0\loch
 will be sent to Jenkins asking to pause pipeline execution, and resumed when the developer exits the live debugger. This is easily achieved by waiting for user input with the \u8220\'93input\u8221\'94 property, which pauses the job.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch\ab0 \ltrch\lang1033\b0\loch
With a shell successfully injecting at the desired time, the next challenge is to allow the developer to access it and the underlying environment, without modifying it. One way of doing this is to create a new terminal in the live debugger script, in Jenkin\u8217\'92s virtual machine, and leverage SSH X11 forwarding to display the terminal on a different computer. In this format, this approach has 2 flows:}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch\ab0 \ltrch\lang1033\b0\loch
- additional software required: if a developer or macOS, they would need to install Xming, a server }{\rtlch\dbch\af9\langfe1025\dbch\af14\afs22\ab0 \ltrch\cf0\fs22\lang1033\b0\kerning1\loch
that locally displays what}{\rtlch\ab0 \ltrch\lang1033\b0\loch
 SSH forwards X11 to.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch\ab0 \ltrch\lang1033\b0\loch
- security concerns: this approach requires a live SSH connection to the Jenkins virtual machine. Allowing anybody to access it could be very dangerous.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0\loch

\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0{\rtlch\ab0 \ltrch\lang1033\b0\loch
Ideally, we would want to remove the step where developers connect via SSH to the Jenkins machine, and remove the need for additional software to simplify the product. One solution that could solve both of these issues is to add an intermediate frontend server, that can connect to the Jenkins server on the user\u8217\'92s behalf and display the shell in the browser. This way, the Jenkins server can have a single inbound rule for SSH (port 22) coming from the frontend\u8217\'92s IP address, and therefore block all requests from other addresses. It would also remove the need for any additional software as developers would need to access their debugging session from the browser. The disadvantage of this approach is that the team would need to  set up the frontend server beforehand, and potentially incur monthly costs for hosting it, but it would only need to be done once.}
\par \pard\plain \s0\dbch\af9\langfe1025\dbch\af14\afs22\alang1081\sl254\slmult1\ql\widctlpar\hyphpar0\faauto\sb0\sa160\ltrpar\cf0\loch\f5\fs22\lang2057\kerning1\sl254\slmult1\li0\ri0\lin0\rin0\fi0\sb0\sa160\loch

\par }